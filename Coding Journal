- resuming at freecodecamp, css module
- get to the relational database mysql part
- complete the project; try within a week?

### November 3, 2023
- added input required element to forms
- [X] add new html knowledge to my flask-account project
- learned about HTML5
- learned that head and body are for the entire doc, but header and footer are for the page, like header and footer are in the body, head is meta for the entire doc

- title
When the shorthand margin property has two values, it sets margin-top and margin-bottom to the first value, and margin-left and margin-right to the second value.

In your .marker CSS rule, set the margin property to 10px auto.

-
There are two main color models: the additive RGB (red, green, blue) model used in electronic devices, and the subtractive CMYK (cyan, magenta, yellow, black) model used in print.

In this project, you'll work with the RGB model. This means that colors begin as black, and change as different levels of red, green, and blue are introduced. An easy way to see this is with the CSS rgb function.

0, 0, 0 black
255, 255, 255 -- white
secondary colors
- pure red, pure green -- pure yellow
- pure green, pure blue -- turquoise
- pure blue, red -- pink

tertiary colors, primary color with secondary color
- tertiary orange = red + yellow
- tertiary spring green = cyan + green
- tertiary violet = magenta + blue
- chartreuse green (green + yellow)
- azure (blue + cyan)
- rose (red + magenta)

A color wheel is a circle where similar colors, or hues, are near each other, and different ones are further apart. For example, pure red is between the hues rose and orange.

Two colors that are opposite from each other on the color wheel are called complementary colors. If two complementary colors are combined, they produce gray. But when they are placed side-by-side, these colors produce strong visual contrast and appear brighter.
-
Notice that the red and cyan colors are very bright right next to each other. This contrast can be distracting if it's overused on a website, and can make text hard to read if it's placed on a complementary-colored background.

It's better practice to choose one color as the dominant color, and use its complementary color as an accent to bring attention to certain content on the page.
-
Notice how your eyes are naturally drawn to the red color in the center? When designing a site, you can use this effect to draw attention to important headings, buttons, or links.

There are several other important color combinations outside of complementary colors, but you'll learn those a bit later.
-
A very common way to apply color to an element with CSS is with hexadecimal or hex values. While hex values sound complicated, they're really just another form of RGB values.

Hex color values start with a # character and take six characters from 0-9 and A-F. The first pair of characters represent red, the second pair represent green, and the third pair represent blue. For example, #4B5320.
In the .green class selector, set the background-color property to a hex color code with the values 00 for red, FF for green, and 00 blue.
-
You may already be familiar with decimal, or base 10 values, which go from 0 - 9. Hexadecimal, or base 16 values, go from 0 - 9, then A - F:

0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F
With hex colors, 00 is 0% of that color, and FF is 100%. So #00FF00 translates to 0% red, 100% green, and 0% blue, and is the same as rgb(0, 255, 0).
-
The HSL color model, or hue, saturation, and lightness, is another way to represent colors.

The CSS hsl function accepts 3 values: a number from 0 to 360 for hue, a percentage from 0 to 100 for saturation, and a percentage from 0 to 100 for lightness.

If you imagine a color wheel, the hue red is at 0 degrees, green is at 120 degrees, and blue is at 240 degrees.

Saturation is the intensity of a color from 0%, or gray, to 100% for pure color. You must add the percent sign % to the saturation and lightness values.

Lightness is how bright a color appears, from 0%, or complete black, to 100%, complete white, with 50% being neutral.
- You've learned a few ways to set flat colors in CSS, but you can also use a color transition, or gradient, on an element.

A gradient is when one color transitions into another. The CSS linear-gradient function lets you control the direction of the transition along a line, and which colors are used.

One thing to remember is that the linear-gradient function actually creates an image element, and is usually paired with the background property which can accept an image as a value.
- linear-gradient css
- Color-stops allow you to fine-tune where colors are placed along the gradient line. They are a length unit like px or percentages that follow a color in the linear-gradient function.

For example, in this red-black gradient, the transition from red to black takes place at the 90% point along the gradient line, so red takes up most of the available space:

linear-gradient(90deg, red 90%, black);
- If no gradientDirection argument is provided to the linear-gradient function, it arranges colors from top to bottom, or along a 180 degree line, by default.
- if no colorstops are provided, it automatically arranges it 0%, 50%, 100%
- Opacity describes how opaque, or non-transparent, something is. For example, a solid wall is opaque, and no light can pass through. But a drinking glass is much more transparent, and you can see through the glass to the other side.

With the CSS opacity property, you can control how opaque or transparent an element is. With the value 0, or 0%, the element will be completely transparent, and at 1.0, or 100%, the element will be completely opaque like it is by default.
- Another way to set the opacity for an element is with the alpha channel. Similar to the opacity property, the alpha channel controls how transparent or opaque a color is.

You've already set sleeve's opacity with a named color and the opacity property, but you can add an alpha channel to the other CSS color properties.
- You're already familiar with using the rgb function to set colors. To add an alpha channel to an rgb color, use the rgba function instead.

The rgba function works just like the rgb function, but takes one more number from 0 to 1.0 for the alpha channel:

rgba(redValue, greenValue, blueValue, alphaValue);
You can also use an alpha channel with hsl and hex colors. You will see how to do that soon.
- It looks like your sleeve disappeared, but don't worry -- it's still there. What happened is that your new cap div is taking up the entire width of the marker, and is pushing the sleeve down to the next line.

This is because the default display property for div elements is block. So when two block elements are next to each other, they stack like actual blocks. For example, your marker elements are all stacked on top of each other.

To position two div elements on the same line, set their display properties to inline-block.
- The border-left shorthand property lets you to set the left border's width, style, and color at the same time.

Here is the syntax:

border-left: width style color;
- box-shadow
- Remember that you don't need to add units to a zero value.
- For the green marker's box-shadow property, replace the named color with a hex color code. Use the values 3B for red, 7E for green, 20 for blue, and CC for the alpha channel.; hex also has like a hexa like rgb, rgba
- hsla function, like hsl + alpha channel

### November 3, 2023 early morning
- [X] completed HTML and CSS modules freecodecamp
- [X] examine default properties whenever something goes wrong; even implicit ones lol; call them explicitly tends to fix it
- step 41, learned about input required element, to make the user fill out that field before submitting
- Step 48 Notice that both radio buttons can be selected at the same time. To make it so selecting one radio button automatically deselects the other, both buttons must have a name attribute with the same value.
- Step 49 If you select the Indoor radio button and submit the form, the form data for the button is based on its name and value attributes. Since your radio buttons do not have a value attribute, the form data will include indoor-outdoor=on, which is not useful when you have multiple buttons. Add a value attribute to both radio buttons. For convenience, set the button's value attribute to the same value as its id attribute.
- inline elements vs. block-level elements
- freecodecamp html module
- fieldset, legend (caption)
- input required element attribute
- input checked element attribute
- Step 56 There's another way to associate an input element's text with the element itself. You can nest the text within a label element and add a for attribute with the same value as the input element's id attribute; Associate the text Loving with the checkbox by nesting only the text Loving in a label element and giving it an appropriate for attribute.
- Step 60 Like radio buttons, form data for selected checkboxes are name / value attribute pairs. While the value attribute is optional, it's best practice to include it with any checkboxes or radio buttons on the page.; Add a value attribute to each checkbox. For convenience, set each checkbox's value attribute to the same value as its id attribute.
- Step 65 Notice that everything you've added to the page so far is inside the body element. All page content elements that should be rendered to the page go inside the body element.However, other important information goes inside the head element.
- html lang attribute
- Step 68 All pages should begin with <!DOCTYPE html>. This special string is known as a declaration and ensures the browser tries to meet industry-wide specifications. Add this declaration as the first line of the code. You can set browser behavior by adding self-closing meta elements in the head. Here's an example: <meta attribute="value"> Tell the browser to parse the markup into multiple languages by creating a meta element as a child of the head element. Set its charset attribute to UTF-8.
- Step 17 For the styling of the page to look similar on mobile as it does on a desktop or laptop, you need to add a meta element with a special content attribute. Add the following within the head element: <meta name="viewport" content="width=device-width, initial-scale=1.0" />
- Step 20 The div element is used mainly for design layout purposes unlike the other content elements you have used so far. Add a div element inside the body element and then move all the other elements inside the new div.
- Step 21 The goal now is to make the div not take up the entire width of the page. The CSS width property is perfect for this. You can use the id selector to target a specific element with an id attribute. An id selector is defined by placing the hash symbol # directly in front of the element's id value. For example, if an element has the id of cat then you would target that element like this:
#cat {
  width: 250px;
}
Use the #menu selector to give your element a width of 300px.
- Change the width property's value to be 80%, to make it 80% the width of its parent element (body).
- Step 25 Next, you want to center the #menu horizontally. You can do this by setting its margin-left and margin-right properties to auto. Think of the margin as invisible space around an element. Using these two margin properties, center the #menu element within the body element.
- Step 26 So far you have been using type and id selectors to style elements. However, it is more common to use a different selector to style your elements.
A class selector is defined by a name with a dot directly in front of it, like this:
.class-name {
  styles
}
Change the existing #menu selector into a class selector by replacing #menu with a class named .menu.
- css background image property
- html article elements, commonly contain multiple elements that have related information., kinda like divs
- Step 37 The p elements are nested in an article element with the class attribute of item. You can style all the p elements nested anywhere in elements with a class named item like this:
.item p { }
Using the above selector, add a display property with value inline-block so the p elements behave more like inline elements.
- Step 38 That's closer, but the price didn't stay over on the right. This is because inline-block elements only take up the width of their content. To spread them out, add a width property to the flavor and price class selectors that have a value of 50% each.
- Step 39 Well that did not work. Styling the p elements as inline-block and placing them on separate lines in the code creates an extra space to the right of the first p element, causing the second one to shift to the next line. One way to fix this is to make each p element's width a little less than 50%.
- Change the width value to 49% for each class to see what happens.
- Step 40 That worked, but there is still a little space on the right of the price. You could keep trying various percentages for the widths. Instead, use the back space key on your keyboard to move the p element with the class price next to the p element with the class flavor so that they are on the same line in the editor. Make sure there is no space between them.
- Step 45 If you make the width of the page preview smaller, you will notice at some point, some of the text on the left starts wrapping around to the next line. This is because the width of the p elements on the left side can only take up 50% of the space. Since you know the prices on the right have significantly fewer characters, change the flavor class width value to be 75% and the price class width value to be 25%.
- Step 56 The current width of the menu will always take up 80% of the body element's width. On a very wide screen, the coffee and dessert appear far apart from their prices. Add a max-width property to the menu class with a value of 500px to prevent it from growing too wide.
- Step 62 The typography of heading elements (e.g. h1, h2) is set by default values of users' browsers. Add two new type selectors (h1 and h2). Use the font-size property for both, but use the value 40px for the h1 and 30px for the h2.
- Step 66 You can use an hr element to display a divider between sections of different content.
- Step 70 Notice how the thickness of the line looks bigger? The default value of a property named border-width is 1px for all edges of hr elements. By changing the border to the same color as the background, the total height of the line is 5px (3px plus the top and bottom border width of 1px). Change the height property of the hr to be 2px, so the total height of it becomes 4px.
- Step 72 To create a little more room around the menu, add 20px of space on the inside of the body element by using the padding property.
- Step 73 Focusing on the menu items and prices, there is a fairly large gap between each line. Use the existing selector that targets all the p elements nested in elements with the class named item and set their top and bottom margin to be 5px.
- Step 79 The default color of a link that has not yet been clicked on is typically blue. The default color of a link that has already been visited from a page is typically purple.
- To make the footer links the same color regardless if a link has been visited, use a type selector for the anchor element (a) and use the value black for the color property.
- A pseudo-class is used to define a special state of an element.
- Step 84 The menu text CAMPER CAFE has a different space from the top than the address's space at the bottom of the menu. This is due to the browser having some default top margin for the h1 element. Change the top margin of the h1 element to 0 to remove all the top margin.
- The image you added is not centered horizontally like the Coffee heading above it. img elements are "like" inline elements.
- Step 91 It would be nice if the vertical space between the h2 elements and their associated icons was smaller. The h2 elements have default top and bottom margin space, so you could change the bottom margin of the h2 elements to say 0 or another number. There is an easier way, simply add a negative top margin to the img elements to pull them up from their current positions. Negative values are created using a - in front of the value. To complete this project, go ahead and use a negative top margin of 25px in the img type selector.

### October 31, 2023
- solved one HackerRank sql problem

### October 30, 2023
- solved one HackerRank SQL problem

### October 29, 2023
- solved one HackerRank SQL problem
- yesterday, one day break
- solved another couple HackerRank problems

### October 27, 2023
- solved one HackerRank problem
- learned about hotlinking from Unsplash API
- flask-account
    - unsplash API image renders correctly
    - google fonts favnum renders correctly
    - added createdtime col to sql database, it renders on the view account page
- resume at: login, then delete account after logging in; otherwise, wait could just preset delete account thing

### October 26, 2023
- solved one HackerRank problem

### October 25, 2023
- solved one HackerRank problem

### October 24, 2023
- finished entire codingbat string-1 module

### October 19, 2023
- did a couple of codingbat exercises

### October 18, 2023
- did one coding exercise on codingbat python, warm up

### October 11, 2023
- learned what a bash function is
- created my first .gitignore file
- recalling difference between git fetch and git pull

### October 9, 2023 -- Software with Eddy session

break since visiting bay area conference
### September 13, 2023 -- Software with Eddy session 

### September 8, 2023 -- Software with Eddy session 

### September 5, 2023 -- Software with Eddy session 

### August 30, 2023 -- Software with Eddy session 

### August 23, 2023 -- Software with Eddy session 

### August 16, 2023 -- Software with Eddy session 

### August 11, 2023 -- Software with Eddy session 

### August 1, 2023 -- Software with Eddy session 

break since July Asia graduation trip
### June 28, 2023 -- Software with Eddy session 

### June 24, 2023 -- first software with Eddy session